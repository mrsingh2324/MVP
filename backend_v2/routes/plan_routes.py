#!/usr/bin/env python3
"""
FastAPI routes for workout plans and AI-generated plans.
"""

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from utils.logger import get_logger
from database.db import db_manager

logger = get_logger(__name__)

# Create router
router = APIRouter(prefix="/api/plans", tags=["plans"])

class WorkoutPlan(BaseModel):
    id: str
    name: str
    description: str
    duration_weeks: int
    difficulty: str
    exercises: List[Dict[str, Any]]
    created_at: str

class PlanRequest(BaseModel):
    fitness_goal: str
    experience_level: str
    available_days: int
    session_duration: int

# Mock workout plans
SAMPLE_PLANS = [
    {
        "id": "beginner_strength",
        "name": "Beginner Strength Training",
        "description": "Perfect for those new to strength training",
        "duration_weeks": 4,
        "difficulty": "Beginner",
        "exercises": [
            {"name": "Push-ups", "sets": 3, "reps": 10, "rest": 60},
            {"name": "Squats", "sets": 3, "reps": 15, "rest": 60},
            {"name": "Bicep Curls", "sets": 3, "reps": 12, "rest": 45}
        ],
        "created_at": datetime.now().isoformat()
    },
    {
        "id": "cardio_blast",
        "name": "Cardio Blast",
        "description": "High-intensity cardio workout",
        "duration_weeks": 6,
        "difficulty": "Intermediate",
        "exercises": [
            {"name": "Jumping Jacks", "sets": 4, "reps": 30, "rest": 30},
            {"name": "Burpees", "sets": 3, "reps": 10, "rest": 60},
            {"name": "Mountain Climbers", "sets": 3, "reps": 20, "rest": 45}
        ],
        "created_at": datetime.now().isoformat()
    }
]

@router.get("/")
async def get_user_plans(session_token: str = Query(...)):
    """Get all plans for a user."""
    try:
        # For demo purposes, return sample plans
        # In production, this would fetch user-specific plans from database
        
        return {
            "success": True,
            "plans": SAMPLE_PLANS,
            "count": len(SAMPLE_PLANS)
        }
        
    except Exception as e:
        logger.error(f"Error getting user plans: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/recommended")
async def get_recommended_plans(session_token: str = Query(...)):
    """Get recommended plans for a user."""
    try:
        # Return recommended plans based on user profile
        recommended = [
            {
                "id": "ai_generated_1",
                "name": "AI Personalized Plan",
                "description": "Custom plan generated by AI based on your profile",
                "duration_weeks": 8,
                "difficulty": "Personalized",
                "exercises": [
                    {"name": "Push-ups", "sets": 3, "reps": 12, "rest": 60},
                    {"name": "Squats", "sets": 4, "reps": 15, "rest": 60},
                    {"name": "Bicep Curls", "sets": 3, "reps": 10, "rest": 45}
                ],
                "created_at": datetime.now().isoformat(),
                "ai_generated": True
            }
        ]
        
        return {
            "success": True,
            "plans": recommended,
            "count": len(recommended)
        }
        
    except Exception as e:
        logger.error(f"Error getting recommended plans: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/generate")
async def generate_ai_plan(request: PlanRequest, session_token: str = Query(...)):
    """Generate a new AI workout plan."""
    try:
        # Generate a plan based on user preferences
        plan_id = f"ai_plan_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Mock AI plan generation
        generated_plan = {
            "id": plan_id,
            "name": f"AI {request.fitness_goal} Plan",
            "description": f"Personalized {request.fitness_goal.lower()} plan for {request.experience_level.lower()} level",
            "duration_weeks": 6,
            "difficulty": request.experience_level,
            "exercises": [
                {"name": "Push-ups", "sets": 3, "reps": 10 + (5 if request.experience_level == "Advanced" else 0), "rest": 60},
                {"name": "Squats", "sets": 3, "reps": 15 + (5 if request.experience_level == "Advanced" else 0), "rest": 60},
                {"name": "Bicep Curls", "sets": 3, "reps": 12 + (3 if request.experience_level == "Advanced" else 0), "rest": 45}
            ],
            "created_at": datetime.now().isoformat(),
            "ai_generated": True,
            "user_preferences": request.dict()
        }
        
        logger.info(f"Generated AI plan: {plan_id}")
        
        return {
            "success": True,
            "message": "AI plan generated successfully",
            "plan": generated_plan
        }
        
    except Exception as e:
        logger.error(f"Error generating AI plan: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/{plan_id}")
async def get_plan_details(plan_id: str, session_token: str = Query(...)):
    """Get details of a specific plan."""
    try:
        # Find plan by ID
        for plan in SAMPLE_PLANS:
            if plan["id"] == plan_id:
                return {
                    "success": True,
                    "plan": plan
                }
        
        raise HTTPException(status_code=404, detail="Plan not found")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting plan details: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/{plan_id}/start")
async def start_plan(plan_id: str, session_token: str = Query(...)):
    """Start a workout plan."""
    try:
        # Find and start the plan
        for plan in SAMPLE_PLANS:
            if plan["id"] == plan_id:
                # In production, this would save the plan start to database
                return {
                    "success": True,
                    "message": f"Started plan: {plan['name']}",
                    "plan": plan,
                    "started_at": datetime.now().isoformat()
                }
        
        raise HTTPException(status_code=404, detail="Plan not found")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error starting plan: {e}")
        raise HTTPException(status_code=500, detail=str(e))
